buildscript {
    ext.kotlin_version = '1.3.20'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'kotlin-multiplatform' version '1.3.20' apply false
}

apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlin-dce-js'

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js') {
            configure([compileKotlinJs, compileTestKotlinJs]) {
                kotlinOptions {
                    languageVersion = "1.3"
                    sourceMap = true
                    metaInfo = true
                    moduleKind = "umd"
                }
            }
        }
        fromPreset(presets.macosX64, 'macosX64')
        fromPreset(presets.linuxX64, 'linuxX64')
        fromPreset(presets.mingwX64, 'mingwX64')

        configure([macosX64, mingwX64, linuxX64]) {
            compilations.main.outputKinds("EXECUTABLE")
        }
    }
    sourceSets {
        nativeCommonMain
        nativeCommonTest

        configure([macosX64Main, linuxX64Main, mingwX64Main]) {
            dependsOn nativeCommonMain
        }
    }
}


repositories {
    mavenCentral()
}

dependencies {
    commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common"
    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-common"

    jsMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-js"
    jsTestImplementation "org.jetbrains.kotlin:kotlin-test-js"

    jvmMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    jvmTestImplementation "org.jetbrains.kotlin:kotlin-test"
    jvmTestImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

apply plugin: "application"

mainClassName = "com.soywiz.ktcc.cli.CLI"

task fatJar(type: Jar) {
    baseName = "${project.name}-all"

    manifest {
        attributes "Main-Class": mainClassName
    }

    from {
        kotlin.targets.jvm.compilations.main.runtimeDependencyFiles.collect { it.isDirectory() ? it : zipTree(it) }
    }

    with jvmJar
}

def jsCompilations = kotlin.targets.js.compilations

task jsWebResources(type: Copy, dependsOn: [runDceJsKotlin]) {
    into new File(rootDir, "docs")
    includeEmptyDirs = false
    from kotlin.sourceSets.jsMain.resources
    from kotlin.sourceSets.commonMain.resources
}

task jsWebDce(type: Copy, dependsOn: [jsWebResources, runDceJsKotlin]) {
    into new File(rootDir, "docs")
    includeEmptyDirs = false
    exclude "**/*.kjsm", "**/*.kotlin_metadata", "**/*.kotlin_module", "**/*.MF", "**/*.meta.js", "**/*.map"
    //exclude "**/*.kjsm", "**/*.kotlin_metadata", "**/*.kotlin_module", "**/*.MF", "**/*.meta.js"
    afterEvaluate {
        from runDceJsKotlin.destinationDir
    }
}

task jsWeb(type: Copy, dependsOn: [jsWebResources, jsMainClasses]) {
    into new File(rootDir, "docs")
    includeEmptyDirs = false
    exclude "**/*.kjsm", "**/*.kotlin_metadata", "**/*.kotlin_module", "**/*.MF", "**/*.meta.js", "**/*.map"
    //exclude "**/*.kjsm", "**/*.kotlin_metadata", "**/*.kotlin_module", "**/*.MF", "**/*.meta.js"
    from jsCompilations.main.output.allOutputs
    afterEvaluate {
        for (f in jsCompilations.main.runtimeDependencyFiles) {
            if (f.exists() && !f.isDirectory()) from zipTree(f.absolutePath)
        }
    }
}

/*
apply plugin: "kotlin"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    //compile "org.jetbrains.kotlin:kotlin-compiler"
    //compile "org.jetbrains.kotlin:kotlin-script-runtime"
    //compile "org.jetbrains.kotlin:kotlin-script-util"
    testCompile "junit:junit:4.11"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"
}

*/
afterEvaluate {
    compileKotlinMacosX64.enabled = false
    linkTestDebugExecutableMacosX64.enabled = false

    compileKotlinLinuxX64.enabled = false
    linkTestDebugExecutableLinuxX64.enabled = false

    compileKotlinMingwX64.enabled = false
    linkTestDebugExecutableMingwX64.enabled = false
}

apply plugin: 'idea'

idea {
    module {
        excludeDirs = [file(".gradle"), file("@old"), file("doc"), file("docs"), file("samples"), file("gradle")]
    }
}