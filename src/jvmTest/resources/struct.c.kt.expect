//ENTRY Program
//Program.main(arrayOf())
@Suppress("MemberVisibilityCanBePrivate", "FunctionName", "CanBeVal", "DoubleNegation", "LocalVariableName", "NAME_SHADOWING", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "RemoveRedundantCallsOfConversionMethods", "EXPERIMENTAL_IS_NOT_ENABLED", "RedundantExplicitType", "RemoveExplicitTypeArguments", "RedundantExplicitType", "unused", "UNCHECKED_CAST", "UNUSED_VARIABLE", "UNUSED_PARAMETER", "NOTHING_TO_INLINE", "PropertyName", "ClassName", "USELESS_CAST", "PrivatePropertyName", "CanBeParameter", "UnusedMainParameter")
@UseExperimental(ExperimentalUnsignedTypes::class)
class Program(HEAP_SIZE: Int = 0) : Runtime(HEAP_SIZE) {
	// typedef unsigned char uint8_t;
	var MyStruct_default: Demo = DemoAlloc(a = 3, b = CPointer(0))
	
	//////////////////
	// C STRUCTURES //
	//////////////////
	
	/*!inline*/ class Demo(val ptr: Int) : IStruct {
		companion object : IStructCompanion<Demo>  {
			const val SIZE_BYTES = 8
			override val SIZE = SIZE_BYTES
			const val OFFSET_a = 0
			const val OFFSET_b = 4
		}
	}
	fun DemoAlloc(): Demo = Demo(alloca(Demo.SIZE_BYTES).ptr)
	fun DemoAlloc(a: Int, b: CPointer<Byte>): Demo = DemoAlloc().apply { this.a = a; this.b = b }
	fun Demo.copyFrom(src: Demo): Demo = this.apply { memcpy(CPointer<Unit>(this.ptr), CPointer<Unit>(src.ptr), Demo.SIZE_BYTES) }
	fun fixedArrayOfDemo(size: Int, vararg items: Demo): CPointer<Demo> = alloca_zero(size * Demo.SIZE_BYTES).toCPointer<Demo>().also { for (n in 0 until items.size) Demo(it.ptr + n * Demo.SIZE_BYTES).copyFrom(items[n]) }
	operator fun CPointer<Demo>.get(index: Int): Demo = Demo(this.ptr + index * Demo.SIZE_BYTES)
	operator fun CPointer<Demo>.set(index: Int, value: Demo) = Demo(this.ptr + index * Demo.SIZE_BYTES).copyFrom(value)
	@kotlin.jvm.JvmName("plusDemo") operator fun CPointer<Demo>.plus(offset: Int): CPointer<Demo> = CPointer(this.ptr + offset * Demo.SIZE_BYTES)
	@kotlin.jvm.JvmName("minusDemo") operator fun CPointer<Demo>.minus(offset: Int): CPointer<Demo> = CPointer(this.ptr - offset * Demo.SIZE_BYTES)
	@kotlin.jvm.JvmName("minusPtrDemo") operator fun CPointer<Demo>.minus(other: CPointer<Demo>) = (this.ptr - other.ptr) / Demo.SIZE_BYTES
	var CPointer<Demo>.value: Demo get() = this[0]; set(value) = run { this[0] = value }
	var Demo.a: Int get() = lw(ptr + Demo.OFFSET_a); set(value) = sw(ptr + Demo.OFFSET_a, value)
	var Demo.b: CPointer<Byte> get() = CPointer(lw(ptr + Demo.OFFSET_b)); set(value) = run { sw(ptr + Demo.OFFSET_b, value.ptr) }
}
