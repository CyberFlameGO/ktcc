//ENTRY Program
//Program.main(arrayOf())
@Suppress("MemberVisibilityCanBePrivate", "FunctionName", "CanBeVal", "DoubleNegation", "LocalVariableName", "NAME_SHADOWING", "VARIABLE_WITH_REDUNDANT_INITIALIZER", "RemoveRedundantCallsOfConversionMethods", "EXPERIMENTAL_IS_NOT_ENABLED", "RedundantExplicitType", "RemoveExplicitTypeArguments", "RedundantExplicitType", "unused", "UNCHECKED_CAST", "UNUSED_VARIABLE", "UNUSED_PARAMETER", "NOTHING_TO_INLINE", "PropertyName", "ClassName", "USELESS_CAST", "PrivatePropertyName", "CanBeParameter", "UnusedMainParameter")
@UseExperimental(ExperimentalUnsignedTypes::class)
class Program(HEAP_SIZE: Int = 0) : Runtime(HEAP_SIZE) {
	// typealias uint8_t = UByte
	fun hdr_bitrate_kbps(h: CPointer<UByte>): UInt = stackFrame {
		var halfrate: Array2Array3CPointer_UByte = Array2Array3CPointer_UByteAlloc(Array3CPointer_UByteAlloc(fixedArrayOfUByte(15, (0.toUByte()), (4.toUByte()), (8.toUByte()), (12.toUByte()), (16.toUByte()), (20.toUByte()), (24.toUByte()), (28.toUByte()), (32.toUByte()), (40.toUByte()), (48.toUByte()), (56.toUByte()), (64.toUByte()), (72.toUByte()), (80.toUByte())), fixedArrayOfUByte(15, (0.toUByte()), (4.toUByte()), (8.toUByte()), (12.toUByte()), (16.toUByte()), (20.toUByte()), (24.toUByte()), (28.toUByte()), (32.toUByte()), (40.toUByte()), (48.toUByte()), (56.toUByte()), (64.toUByte()), (72.toUByte()), (80.toUByte())), fixedArrayOfUByte(15, (0.toUByte()), (16.toUByte()), (24.toUByte()), (28.toUByte()), (32.toUByte()), (40.toUByte()), (48.toUByte()), (56.toUByte()), (64.toUByte()), (72.toUByte()), (80.toUByte()), (88.toUByte()), (96.toUByte()), (112.toUByte()), (128.toUByte()))), Array3CPointer_UByteAlloc(fixedArrayOfUByte(15, (0.toUByte()), (16.toUByte()), (20.toUByte()), (24.toUByte()), (28.toUByte()), (32.toUByte()), (40.toUByte()), (48.toUByte()), (56.toUByte()), (64.toUByte()), (80.toUByte()), (96.toUByte()), (112.toUByte()), (128.toUByte()), (160.toUByte())), fixedArrayOfUByte(15, (0.toUByte()), (16.toUByte()), (24.toUByte()), (28.toUByte()), (32.toUByte()), (40.toUByte()), (48.toUByte()), (56.toUByte()), (64.toUByte()), (80.toUByte()), (96.toUByte()), (112.toUByte()), (128.toUByte()), (160.toUByte()), (192.toUByte())), fixedArrayOfUByte(15, (0.toUByte()), (16.toUByte()), (32.toUByte()), (48.toUByte()), (64.toUByte()), (80.toUByte()), (96.toUByte()), (112.toUByte()), (128.toUByte()), (144.toUByte()), (160.toUByte()), (176.toUByte()), (192.toUByte()), (208.toUByte()), (224.toUByte()))))
		return (2 * (halfrate[(!(!(((h[1].toUInt()) and (8.toUInt())).toBool()))).toInt().toInt()][((((h[1].toUInt()) shr (1).toInt()) and (3.toUInt())).toInt()) - 1][((h[2].toUInt()) shr (4).toInt()).toInt()].toInt())).toUInt()
	}
	/*!inline*/ class Array2Array3CPointer_UByte(val ptr: Int) {
		companion object {
			const val NUM_ELEMENTS = 2
			const val ELEMENT_SIZE_BYTES = 45
			const val TOTAL_SIZE_BYTES = /*90*/ (NUM_ELEMENTS * ELEMENT_SIZE_BYTES)
		}
		fun addr(index: Int) = ptr + index * ELEMENT_SIZE_BYTES
	}
	operator fun Array2Array3CPointer_UByte.get(index: Int): Array3CPointer_UByte = Array3CPointer_UByte(addr(index))
	operator fun Array2Array3CPointer_UByte.set(index: Int, value: Array3CPointer_UByte): Unit = run { memcpy(CPointer(addr(index)), CPointer(value.ptr), Array2Array3CPointer_UByte.ELEMENT_SIZE_BYTES) }
	var Array2Array3CPointer_UByte.value get() = this[0]; set(value) = run { this[0] = value }
	fun Array2Array3CPointer_UByteAlloc(vararg items: Array3CPointer_UByte): Array2Array3CPointer_UByte = Array2Array3CPointer_UByte(alloca_zero(Array2Array3CPointer_UByte.TOTAL_SIZE_BYTES).ptr).also { for (n in 0 until items.size) it[n] = items[n] }
	operator fun Array2Array3CPointer_UByte.plus(offset: Int): CPointer<Array3CPointer_UByte> = CPointer<Array3CPointer_UByte>(addr(offset))
	operator fun Array2Array3CPointer_UByte.minus(offset: Int): CPointer<Array3CPointer_UByte> = CPointer<Array3CPointer_UByte>(addr(-offset))
	/*!inline*/ class Array3CPointer_UByte(val ptr: Int) {
		companion object {
			const val NUM_ELEMENTS = 3
			const val ELEMENT_SIZE_BYTES = 15
			const val TOTAL_SIZE_BYTES = /*45*/ (NUM_ELEMENTS * ELEMENT_SIZE_BYTES)
		}
		fun addr(index: Int) = ptr + index * ELEMENT_SIZE_BYTES
	}
	operator fun Array3CPointer_UByte.get(index: Int): CPointer<UByte> = CPointer<UByte>(addr(index))
	operator fun Array3CPointer_UByte.set(index: Int, value: CPointer<UByte>): Unit = run { memcpy(CPointer(addr(index)), CPointer(value.ptr), Array3CPointer_UByte.ELEMENT_SIZE_BYTES) }
	var Array3CPointer_UByte.value get() = this[0]; set(value) = run { this[0] = value }
	fun Array3CPointer_UByteAlloc(vararg items: CPointer<UByte>): Array3CPointer_UByte = Array3CPointer_UByte(alloca_zero(Array3CPointer_UByte.TOTAL_SIZE_BYTES).ptr).also { for (n in 0 until items.size) it[n] = items[n] }
	operator fun Array3CPointer_UByte.plus(offset: Int): CPointer<CPointer<UByte>> = CPointer<CPointer<UByte>>(addr(offset))
	operator fun Array3CPointer_UByte.minus(offset: Int): CPointer<CPointer<UByte>> = CPointer<CPointer<UByte>>(addr(-offset))
}
